{"version":3,"sources":["components/FeedbackOptions.js","components/Statistics.js","components/Section.js","components/Notification.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","Object","keys","map","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","handleFeedback","feedbackId","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAqBeA,EAnBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,qBAAKC,UAAU,qBAAf,SACGC,OAAOC,KAAKJ,GAASK,KAAI,SAAAC,GAAI,OAC5B,wBAEEJ,UAAU,4BACVK,QAAS,kBAAMN,EAAgBK,IAHjC,SAKGA,GAJIA,SCcEE,EAlBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACjB,sBAAKX,UAAU,uBAAf,UACE,oBAAGA,UAAU,8BAAb,mBAAkDO,KAClD,oBAAGP,UAAU,8BAAb,sBAAqDQ,KACrD,oBAAGR,UAAU,8BAAb,kBAAiDS,KACjD,oBAAGT,UAAU,8BAAb,oBAAmDU,KACnD,oBAAGV,UAAU,8BAAb,gCAA+DW,EAA/D,WCQWC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,oBAAId,UAAU,kBAAd,SAAiCa,IAChCC,MCIQC,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mBAAGhB,UAAU,8BAAb,SAA4CgB,KCsD/BC,E,4MAlDbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,eAAiB,SAAAC,GACf,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAaE,EAAUF,GAAc,O,EAI1CG,mBAAqB,WACnB,OAAO,EAAKL,MAAMX,KAAO,EAAKW,MAAMV,QAAU,EAAKU,MAAMT,K,EAG3De,gCAAkC,WAChC,OACE,EAAKD,uBACe,IAAlB,EAAKL,MAAMX,KAAc,EAAKgB,sBAAsBE,W,4CAI1D,WACE,OACE,sBAAKzB,UAAU,WAAf,UACE,cAAC,EAAD,CAASa,MAAM,0BAAf,SACE,cAAC,EAAD,CACEf,QAAS4B,KAAKR,MACdnB,gBAAiB2B,KAAKP,mBAG1B,cAAC,EAAD,CAASN,MAAM,aAAf,SACGa,KAAKH,qBACJ,cAAC,EAAD,CACEhB,KAAMmB,KAAKR,MAAMX,KACjBC,QAASkB,KAAKR,MAAMV,QACpBC,IAAKiB,KAAKR,MAAMT,IAChBC,MAAOgB,KAAKH,qBACZZ,mBAAoBe,KAAKF,oCAG3B,cAAC,EAAD,CAAcR,QAAQ,+B,GA3ChBW,a,MCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a5bcc35b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <div className=\"Feedback__controls\">\r\n    {Object.keys(options).map(name => (\r\n      <button\r\n        key={name}\r\n        className=\"Feedback__controls-button\"\r\n        onClick={() => onLeaveFeedback(name)}\r\n      >\r\n        {name}\r\n      </button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => (\r\n  <div className=\"Feedback__statistics\">\r\n    <p className=\"Feedback__statistics-result\">Good: {good}</p>\r\n    <p className=\"Feedback__statistics-result\">Neutral: {neutral}</p>\r\n    <p className=\"Feedback__statistics-result\">Bad: {bad}</p>\r\n    <p className=\"Feedback__statistics-result\">Total: {total}</p>\r\n    <p className=\"Feedback__statistics-result\">Positive feedback: {positivePercentage}%</p>\r\n  </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1 className=\"Feedback__title\">{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node,\r\n  };\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <p className=\"Feedback__statistics-result\">{message}</p>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = feedbackId => {\n    this.setState(prevState => ({\n      [feedbackId]: prevState[feedbackId] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return (\n      this.countTotalFeedback() &&\n      ((this.state.good * 100) / this.countTotalFeedback()).toFixed()\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"Feedback\">\n        <Section title=\"Please leave a feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'modern-normalize/modern-normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}